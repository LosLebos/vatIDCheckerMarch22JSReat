{"version":3,"file":"TimePicker.js","sourceRoot":"../src/","sources":["components/TimePicker/TimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeyCodes } from '../../Utilities';\nimport { TimeConstants, addMinutes, formatTimeString, ceilMinuteToIncrement } from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nimport type { IComboBox, IComboBoxOption } from '../../ComboBox';\nimport type { ITimePickerProps, ITimeRange, ITimePickerStrings } from './TimePicker.types';\n\nconst REGEX_SHOW_SECONDS_HOUR_12 = /((1[0-2]|0?[1-9]):([0-5][0-9]):(?:[0-5]\\d) ?([AaPp][Mm]))$/;\nconst REGEX_HIDE_SECONDS_HOUR_12 = /((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))$/;\nconst REGEX_SHOW_SECONDS_HOUR_24 = /([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:[0-5]\\d):(?:[0-5]\\d)$/;\nconst REGEX_HIDE_SECONDS_HOUR_24 = /([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:[0-5]\\d)$/;\n\nconst TIME_LOWER_BOUND = 0;\nconst TIME_UPPER_BOUND = 23;\n\nconst getDefaultStrings = (useHour12: boolean, showSeconds: boolean): ITimePickerStrings => {\n  let errorMessageToDisplay = '';\n  const hourUnits = useHour12 ? '12-hour' : '24-hour';\n  showSeconds\n    ? (errorMessageToDisplay = `TimePicker format must be valid and in the ${hourUnits} ` + `format hh:mm:ss A.`)\n    : (errorMessageToDisplay = `TimePicker format must be valid and in the ${hourUnits} ` + `format hh:mm A.`);\n\n  return {\n    invalidInputErrorMessage: errorMessageToDisplay,\n  };\n};\n\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = ({\n  label,\n  increments = 30,\n  showSeconds = false,\n  allowFreeform = true,\n  useHour12 = false,\n  timeRange,\n  strings = getDefaultStrings(useHour12, showSeconds),\n  onFormatDate,\n  onValidateUserInput,\n  onChange,\n  ...rest\n}: ITimePickerProps) => {\n  const [userText, setUserText] = React.useState<string>('');\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n\n  const optionsCount = getDropdownOptionsCount(increments, timeRange);\n\n  const timePickerOptions: IComboBoxOption[] = React.useMemo(() => {\n    const optionsList = Array(optionsCount);\n    for (let i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n    const defaultTime = generateDefaultTime(increments, timeRange);\n\n    return optionsList.map((_, index) => {\n      const option = addMinutes(defaultTime, increments * index);\n      option.setSeconds(0);\n      const optionText = onFormatDate ? onFormatDate(option) : formatTimeString(option, showSeconds, useHour12);\n      return {\n        key: optionText,\n        text: optionText,\n      };\n    });\n  }, [timeRange, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  const [selectedKey, setSelectedKey] = React.useState<string | number | undefined>(timePickerOptions[0].key);\n\n  const onInputChange = React.useCallback(\n    (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string): void => {\n      if (onChange) {\n        onChange(event, option, index, value);\n      }\n\n      const validateUserInput = (userInput: string): string => {\n        let errorMessageToDisplay = '';\n        let regex: RegExp;\n        if (useHour12) {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n        } else {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n        }\n        if (!regex.test(userInput)) {\n          errorMessageToDisplay = strings.invalidInputErrorMessage;\n        }\n        return errorMessageToDisplay;\n      };\n\n      const key = option?.key;\n      let updatedUserText = '';\n      let errorMessageToDisplay = '';\n      if (value) {\n        if (allowFreeform && !option) {\n          if (!onFormatDate) {\n            // Validate only if user did not add onFormatDate\n            errorMessageToDisplay = validateUserInput(value);\n          } else {\n            // Use user provided validation if onFormatDate is provided\n            if (onValidateUserInput) {\n              errorMessageToDisplay = onValidateUserInput(value);\n            }\n          }\n        }\n        updatedUserText = value;\n      } else if (option) {\n        updatedUserText = option.text;\n      }\n\n      setErrorMessage(errorMessageToDisplay);\n      setUserText(updatedUserText);\n      setSelectedKey(key);\n    },\n    [\n      allowFreeform,\n      onFormatDate,\n      onValidateUserInput,\n      showSeconds,\n      useHour12,\n      onChange,\n      strings.invalidInputErrorMessage,\n    ],\n  );\n\n  const evaluatePressedKey = (event: React.KeyboardEvent<IComboBox>) => {\n    if (\n      !onFormatDate &&\n      // Only permit input of digits, space, colon, A/P/M characters\n      !(\n        (event.charCode >= KeyCodes.zero && event.charCode <= KeyCodes.colon) ||\n        event.charCode === KeyCodes.space ||\n        event.charCode === KeyCodes.a ||\n        event.charCode === KeyCodes.m ||\n        event.charCode === KeyCodes.p\n      )\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  return (\n    <ComboBox\n      {...rest}\n      allowFreeform={allowFreeform}\n      selectedKey={selectedKey}\n      label={label}\n      errorMessage={errorMessage}\n      options={timePickerOptions}\n      onChange={onInputChange}\n      text={userText}\n      //eslint-disable-next-line\n      onKeyPress={evaluatePressedKey}\n    />\n  );\n};\nTimePicker.displayName = 'TimePicker';\n\nconst clampTimeRange = (timeRange: ITimeRange): ITimeRange => {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n  };\n};\n\nconst generateDefaultTime = (increments: number, timeRange: ITimeRange | undefined) => {\n  const newDefaultTime = new Date();\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    newDefaultTime.setHours(clampedTimeRange.start);\n  }\n\n  return ceilMinuteToIncrement(newDefaultTime, increments);\n};\n\nconst getDropdownOptionsCount = (increments: number, timeRange: ITimeRange | undefined) => {\n  let hoursInRange = TimeConstants.HoursInOneDay;\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n  return Math.floor((TimeConstants.MinutesInOneHour * hoursInRange) / increments);\n};\n"]}