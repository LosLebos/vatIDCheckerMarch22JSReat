{"version":3,"file":"TimePicker.types.js","sourceRoot":"../src/","sources":["components/TimePicker/TimePicker.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { IComboBoxProps } from '../../ComboBox';\n\n/**\n * Range of start and end hours to be shown in the TimePicker.\n */\nexport interface ITimeRange {\n  /** Start hour (inclusive) for the time range, 0-23 */\n  start: number;\n  /** End hour (exclusive) for the time range, 0-23 */\n  end: number;\n}\n\n/**\n * Localized strings to use in the TimePicker\n */\nexport interface ITimePickerStrings {\n  /** Error message to render below the field if input parsing fails. */\n  invalidInputErrorMessage: string;\n}\n\nexport interface ITimePickerProps\n  extends Omit<IComboBoxProps, 'options' | 'selectedKey' | 'defaultSelectedKey' | 'multiSelect' | 'text'> {\n  /**\n   * Label of the component\n   */\n  label?: string;\n  /**\n   * Time increments, in minutes, of the options in the dropdown\n   */\n  increments?: number;\n  /**\n   * If true, show seconds in the dropdown options and consider seconds for\n   * default validation purposes.\n   */\n  showSeconds?: boolean;\n  /**\n   * If true, use 12-hour time format. Otherwise, use 24-hour format.\n   */\n  useHour12?: boolean;\n  /**\n   * If true, the TimePicker allows freeform user input, rather than restricting\n   * to the default increments.\n   *\n   * The input will still be restricted to valid time values.\n   */\n  allowFreeform?: boolean;\n  /**\n   * Custom time range to for time options\n   */\n  timeRange?: ITimeRange;\n  /**\n   * Localized strings to use in the TimePicker\n   */\n  strings?: ITimePickerStrings;\n  /**\n   * Callback to localize the date strings displayed for dropdown options\n   */\n  onFormatDate?: (date: Date) => string;\n  /**\n   * Callback to use custom user-input validation\n   */\n  onValidateUserInput?: (userInput: string) => string;\n}\n"]}