{"version":3,"file":"timeMath.js","sourceRoot":"../src/","sources":["timeMath/timeMath.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAE5D;;;;;GAKG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,UAAC,IAAU,EAAE,OAAe;IACpD,IAAM,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACxC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,OAAO,GAAG,aAAa,CAAC,gBAAgB,GAAG,aAAa,CAAC,kBAAkB,CAAC,CAAC;IAC/G,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,IAAM,qBAAqB,GAAG,UAAC,IAAU,EAAE,UAAkB;IAClE,IAAM,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACxC,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IACjC,IAAI,aAAa,CAAC,gBAAgB,GAAG,UAAU,EAAE;QAC/C,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KACtB;SAAM;QACL,IAAM,KAAK,GAAG,aAAa,CAAC,gBAAgB,GAAG,UAAU,CAAC;QAC1D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE,EAAE;YAC/B,IAAI,MAAM,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,UAAU,GAAG,CAAC,EAAE;gBAC7D,MAAM,GAAG,UAAU,GAAG,CAAC,CAAC;gBACxB,MAAM;aACP;SACF;QACD,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KAC3B;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of minutes.\n * @param date - The origin date\n * @param minutes - The number of minutes to offset. 'minutes' can be negative.\n * @returns A new Date object offset from the origin date by the given number of minutes\n */\nexport const addMinutes = (date: Date, minutes: number): Date => {\n  const result = new Date(date.getTime());\n  result.setTime(result.getTime() + minutes * TimeConstants.MinutesInOneHour * TimeConstants.MillisecondsIn1Sec);\n  return result;\n};\n\n/**\n * Rounds the date's minute up to the next available increment. For example, if `date` has time 1:21\n * and `increments` is 5, the resulting time will be 1:25.\n * @param date - Date to ceil minutes\n * @param increments - Time increments\n * @returns Date with ceiled minute\n */\nexport const ceilMinuteToIncrement = (date: Date, increments: number) => {\n  const result = new Date(date.getTime());\n  let minute = result.getMinutes();\n  if (TimeConstants.MinutesInOneHour % increments) {\n    result.setMinutes(0);\n  } else {\n    const times = TimeConstants.MinutesInOneHour / increments;\n    for (let i = 1; i <= times; i++) {\n      if (minute > increments * (i - 1) && minute <= increments * i) {\n        minute = increments * i;\n        break;\n      }\n    }\n    result.setMinutes(minute);\n  }\n  return result;\n};\n"]}