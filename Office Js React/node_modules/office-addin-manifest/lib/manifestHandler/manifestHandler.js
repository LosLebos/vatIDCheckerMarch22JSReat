// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManifestHandler = void 0;
const util = require("util");
const fs = require("fs");
class ManifestHandler {
    /* eslint-disable no-unused-vars */
    constructor() {
        this.manifestPath = "";
        this.fileData = "";
    }
    readFromManifestFile(manifestPath) {
        return __awaiter(this, void 0, void 0, function* () {
            this.manifestPath = manifestPath;
            try {
                const fileData = yield util.promisify(fs.readFile)(manifestPath, {
                    encoding: "utf8",
                });
                this.fileData = fileData;
                return fileData;
            }
            catch (err) {
                throw new Error(`Unable to read data for manifest file: ${manifestPath}. \n${err}`);
            }
        });
    }
}
exports.ManifestHandler = ManifestHandler;
//# sourceMappingURL=manifestHandler.js.map