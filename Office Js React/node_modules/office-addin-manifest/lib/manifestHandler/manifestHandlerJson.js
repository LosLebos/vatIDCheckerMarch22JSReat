// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManifestHandlerJson = void 0;
const manifestInfo_1 = require("../manifestInfo");
const manifestHandler_1 = require("./manifestHandler");
class ManifestHandlerJson extends manifestHandler_1.ManifestHandler {
    /* eslint-disable @typescript-eslint/no-unused-vars */
    modifyManifest(guid, displayName) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Manifest cannot be modified in .json files");
        });
    }
    parseManifest() {
        return __awaiter(this, void 0, void 0, function* () {
            const manifestInfo = new manifestInfo_1.ManifestInfo();
            try {
                const file = yield JSON.parse(this.fileData);
            }
            catch (err) {
                throw new Error(`Unable to read data for manifest file: ${this.manifestPath}. \n${err}`);
            }
            throw new Error("Manifest cannot be parsed in .json files");
        });
    }
    writeManifestData(manifestData) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Manifest cannot be written in .json files");
        });
    }
}
exports.ManifestHandlerJson = ManifestHandlerJson;
//# sourceMappingURL=manifestHandlerJson.js.map