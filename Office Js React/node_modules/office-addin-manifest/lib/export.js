var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportMetadataPackage = void 0;
const fs = require("fs");
const fsExtra = require("fs-extra");
const jszip = require("jszip");
const path = require("path");
function exportMetadataPackage(output = "", manifest = "manifest.json", assets = "assets") {
    return __awaiter(this, void 0, void 0, function* () {
        const zip = new jszip();
        const manifestPath = path.resolve(manifest);
        if (fs.existsSync(manifestPath)) {
            const manifestData = fs.readFileSync(manifestPath);
            zip.file("manifest.json", manifestData);
        }
        else {
            throw new Error(`The file '${manifestPath}' does not exist`);
        }
        if (fs.existsSync(assets)) {
            const files = fs.readdirSync(assets);
            zip.folder(assets);
            files.forEach((element) => {
                const filePath = path.join(assets, element);
                const fileData = fs.readFileSync(filePath);
                zip.file(filePath, fileData);
            });
        }
        else {
            throw new Error("Need folder of assets referenced by manifest file");
        }
        if (output === "") {
            output = path.join(path.dirname(manifestPath), "manifest.zip");
        }
        else {
            output = path.resolve(output);
        }
        fsExtra.ensureDirSync(path.dirname(output));
        yield new Promise((fulfill) => zip
            .generateNodeStream({ type: "nodebuffer", streamFiles: true })
            .pipe(fs.createWriteStream(output))
            .on("finish", fulfill));
        return output;
    });
}
exports.exportMetadataPackage = exportMetadataPackage;
//# sourceMappingURL=export.js.map