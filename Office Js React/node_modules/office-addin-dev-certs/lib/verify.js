// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyCertificates = exports.isCaCertificateInstalled = void 0;
const child_process_1 = require("child_process");
const crypto = require("crypto");
const fs = require("fs");
const path = require("path");
const defaults = require("./defaults");
const defaults_1 = require("./defaults");
const office_addin_usage_data_1 = require("office-addin-usage-data");
/* global process, Buffer, __dirname */
function getVerifyCommand() {
    switch (process.platform) {
        case "win32": {
            const script = path.resolve(__dirname, "..\\scripts\\verify.ps1");
            return `powershell -ExecutionPolicy Bypass -File "${script}" "${defaults.certificateName}"`;
        }
        case "darwin": {
            // macOS
            const script = path.resolve(__dirname, "../scripts/verify.sh");
            return `sh ${script} '${defaults.certificateName}'`;
        }
        case "linux":
            return `[ -f /usr/local/share/ca-certificates/office-addin-dev-certs/${defaults.caCertificateFileName} ] && openssl x509 -in /usr/local/share/ca-certificates/office-addin-dev-certs/${defaults.caCertificateFileName} -checkend 86400 -noout`;
        default:
            throw new office_addin_usage_data_1.ExpectedError(`Platform not supported: ${process.platform}`);
    }
}
function isCaCertificateInstalled() {
    const command = getVerifyCommand();
    try {
        const output = (0, child_process_1.execSync)(command, { stdio: "pipe" }).toString();
        // script files return empty string if the certificate not found or expired
        if (output.length !== 0) {
            return true;
        }
    }
    catch (error) {
        // Some commands throw errors if the certifcate is not found or expired
    }
    return false;
}
exports.isCaCertificateInstalled = isCaCertificateInstalled;
function validateCertificateAndKey(certificatePath, keyPath) {
    let certificate = "";
    let key = "";
    try {
        certificate = fs.readFileSync(certificatePath).toString();
    }
    catch (err) {
        throw new Error(`Unable to read the certificate.\n${err}`);
    }
    try {
        key = fs.readFileSync(keyPath).toString();
    }
    catch (err) {
        throw new Error(`Unable to read the certificate key.\n${err}`);
    }
    let encrypted;
    try {
        encrypted = crypto.publicEncrypt(certificate, Buffer.from("test"));
    }
    catch (err) {
        throw new Error(`The certificate is not valid.\n${err}`);
    }
    try {
        crypto.privateDecrypt(key, encrypted);
    }
    catch (err) {
        throw new Error(`The certificate key is not valid.\n${err}`);
    }
}
function verifyCertificates(certificatePath = defaults.localhostCertificatePath, keyPath = defaults.localhostKeyPath) {
    try {
        let isCertificateValid = true;
        try {
            validateCertificateAndKey(certificatePath, keyPath);
        }
        catch (err) {
            isCertificateValid = false;
        }
        let output = isCertificateValid && isCaCertificateInstalled();
        defaults_1.usageDataObject.reportSuccess("verifyCertificates()");
        return output;
    }
    catch (err) {
        defaults_1.usageDataObject.reportException("verifyCertificates()", err);
        throw err;
    }
}
exports.verifyCertificates = verifyCertificates;
//# sourceMappingURL=verify.js.map